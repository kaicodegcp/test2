Install Docker from Local Files
Step 1: Download all RPMs (if not already):

bash
Copy
Edit
mkdir -p /tmp/docker-install
cd /tmp/docker-install

# Replace with your actual download method if needed (wget, curl, etc.)
wget https://artifactrepository.net/.../containerd.io-1.6.33-*.rpm
wget https://artifactrepository..net/.../docker-ce-28.1.1-*.rpm
wget https://artifactrepository..net/.../docker-ce-cli-28.1.1-*.rpm
wget https://artifactrepository..net/.../docker-compose-plugin-*.rpm
wget https://artifactrepository..net/.../docker-buildx-plugin-*.rpm
Step 2: Install all required RPMs:

bash
Copy
Edit
dnf install -y ./containerd.io-*.rpm ./docker-ce-*.rpm ./docker-ce-cli-*.rpm
Optional plugins (safe to include):

bash
Copy
Edit
dnf install -y ./docker-compose-plugin-*.rpm ./docker-buildx-plugin-*.rpm
üîÅ Step 3: Start Docker Service
bash
Copy
Edit
systemctl enable --now docker
Then verify:

bash
Copy
Edit
docker info
docker images



========
What to Do on dfgtr162x01t2.nam.nsroot.net
Use the same oc debug procedure you‚Äôve used successfully before:

bash
Copy
Edit
oc debug node/dfgtr162x01t2.nam.nsroot.net
chroot /host

# Copy in your registry cert (adjust path if needed)
cp /tmp/domain.crt /etc/pki/ca-trust/source/anchors/sd-wv58-kflz.crt

# Update system trust store
update-ca-trust extract

# Restart CRI-O
systemctl restart crio

exit
exit
üîÅ Then:
bash
Copy
Edit
oc delete pod <failing-pod-name> -n taco-cds
Watch for the pod to reschedule:

bash
Copy
Edit
watch oc get pods -n taco-cds
üß† Bonus: See Which Nodes Still Don‚Äôt Trust the Cert
Run this loop from your admin host:

bash
Copy
Edit
for node in $(oc get nodes --no-headers | awk '{print $1}'); do
  echo ">>> Checking $node"
  oc debug node/$node -- chroot /host curl -sf https://sd-wv58-kflz.nam.nsroot.net:5000/v2/_catalog || echo "$node FAILED TLS"
done
This will list which nodes still need the fix.



=================


Correct Steps to Fix It
Here‚Äôs how to properly copy the domain.crt file into the debug pod‚Äôs host:

‚úÖ Step-by-step:
Stay on the OpenShift admin host (not inside the pod)
Where your cert file already exists:

bash
Copy
Edit
/tmp/domain.crt
Start the debug session like you already did:

bash
Copy
Edit
oc debug node/dfgtr040x12h5.nam.nsroot.net
Inside debug pod shell: mount host tools:

bash
Copy
Edit
chroot /host
Open a new terminal/tab (stay outside the debug pod) and copy the cert:

bash
Copy
Edit
oc cp /tmp/domain.crt dfgtr040x12h5.nam.nsroot.net:/host/tmp/domain.crt
Replace the node name (dfgtr040x12h5.nam.nsroot.net) with the actual node name if needed.

Back in your chrooted debug shell, copy the cert to anchors:

bash
Copy
Edit
cp /tmp/domain.crt /etc/pki/ca-trust/source/anchors/sd-wv58-kflz.crt
Update trust:

bash
Copy
Edit
update-ca-trust extract
‚úÖ Final Validation:
To ensure the Docker registry is now trusted, run:

bash
Copy
Edit
openssl s_client -connect sd-wv58-kflz.nam.nsroot.net:5000 -CAfile /etc/ssl/certs/ca-bundle.crt
Let me know if you want a script or oc debug loop for all nodes.

Final Script: watch-cert-sync.sh
bash
Copy
Edit
#!/bin/bash

# Configuration
CERT_URL="https://www.artifrepository.citigroup.net/artifactory/generic-cto-dev-local/cate-bigdata-165345/docker/domain.crt"
NODES=(
  bdgtr051x03h5.nam.nsroot.net
  dfgtr040x12h5.nam.nsroot.net
  dfgtr042x28h5.nam.nsroot.net
  dfgtr114x11h5.nam.nsroot.net
  dfgtr162x01t2.nam.nsroot.net
  ezgtr084x01t1.nam.nsroot.net
  ezgtr129x27t2.nam.nsroot.net
)

# Loop forever every 30 seconds
while true; do
  echo "==== $(date) - Running cert sync ===="

  for NODE in "${NODES[@]}"; do
    echo ">>> Processing node: $NODE"

    oc debug node/$NODE -- chroot /host /bin/bash -c "
      if [ ! -f /etc/pki/ca-trust/source/anchors/domain.crt ]; then
        echo '[INFO] Downloading cert on $NODE...'
        curl -s -o /etc/pki/ca-trust/source/anchors/domain.crt $CERT_URL
        if [[ -s /etc/pki/ca-trust/source/anchors/domain.crt ]]; then
          echo '[INFO] Updating CA trust on $NODE...'
          update-ca-trust extract
          echo '[SUCCESS] Cert installed and trusted on $NODE.'
        else
          echo '[ERROR] Cert download failed on $NODE.'
        fi
      else
        echo '[SKIP] Cert already exists on $NODE.'
      fi
    "

    echo ""
  done

  echo "[SLEEP] Waiting 30 seconds before next check..."
  sleep 30
done
âœ… How to Use
Save and make executable:

bash
Copy
Edit
vi watch-cert-sync.sh
chmod +x watch-cert-sync.sh
Run in background:

bash
Copy
Edit
nohup ./watch-cert-sync.sh >> /var/log/domain-cert-sync.log 2>&1 &
(Optional) Check log:

bash
Copy
Edit
tail -f /var/log/domain-cert-sync.log
(Optional) Add to /etc/rc.local or crontab to auto-start on boot.

âœ… What It Does
Runs every 30 seconds

Uses oc debug + chroot on each worker node

Skips nodes where domain.crt already exists

Auto-restores and trusts if missing

Let me know if you want alerts (email or Slack) on failure, or a systemd unit to run this as a managed service.








You said:
share crontab no sleep 


ChatGPT said:
Sure! To run your domain.crt sync continuously every 30 seconds via cron, weâ€™ll use two entries spaced 30 seconds apart, since standard cron syntax only supports per-minute granularity.

âœ… Step-by-Step: Run Sync Script Every 30 Seconds via Crontab
ðŸ”¹ 1. Move your script to a known location
bash
Copy
Edit
sudo mv watch-cert-sync.sh /usr/local/bin/domain-cert-sync.sh
sudo chmod +x /usr/local/bin/domain-cert-sync.sh
ðŸ”¹ 2. Edit the root crontab
bash
Copy
Edit
sudo crontab -e
Add the following 2 lines:

cron
Copy
Edit
* * * * * /usr/local/bin/domain-cert-sync.sh >> /var/log/domain-cert-sync.log 2>&1
* * * * * sleep 30 && /usr/local/bin/domain-cert-sync.sh >> /var/log/domain-cert-sync.log 2>&1
ðŸ”¹ 3. Confirm it's scheduled
bash
Copy
Edit
sudo crontab -l



========
#!/bin/bash

# Artifactory cert URL + credentials
CERT_URL="https://www.artifrepository.citigroup.net/artifactory/generic-cto-dev-local/cate-bigdata-165345/docker/domain.crt"
ARTIFACTORY_AUTH="bd_artifactory_read:cmVmdGtuOjAxOjAwMDAwMDAwMDA6NkI0Uko5TGROZ1ZoZUx4bzJTZj1QVHhqYzRu"

# Worker nodes list
NODES=(
  bdgtr051x03h5.nam.nsroot.net
  dfgtr040x12h5.nam.nsroot.net
  dfgtr042x28h5.nam.nsroot.net
  dfgtr114x11h5.nam.nsroot.net
  dfgtr162x01t2.nam.nsroot.net
  ezgtr084x01t1.nam.nsroot.net
  ezgtr129x27t2.nam.nsroot.net
)

echo "==== $(date) - Running domain.crt sync ===="

for NODE in "${NODES[@]}"; do
  echo ">>> Processing node: $NODE"

  oc debug node/$NODE -- chroot /host /bin/bash -c "
    if [ ! -f /etc/pki/ca-trust/source/anchors/domain.crt ]; then
      echo '[INFO] Cert missing, downloading from Artifactory...'
      curl -k -s -L -u $ARTIFACTORY_AUTH -o /etc/pki/ca-trust/source/anchors/domain.crt $CERT_URL
      if [[ -s /etc/pki/ca-trust/source/anchors/domain.crt ]]; then
        update-ca-trust extract
        echo '[SUCCESS] domain.crt restored and trusted on $NODE'
      else
        echo '[ERROR] Failed to download cert on $NODE'
      fi
    else
      echo '[SKIP] domain.crt already exists on $NODE'
    fi
  "

  echo ""
done



=======
#!/bin/bash

CERT_PATH="/tmp/domain.crt"
CERT_URL="https://www.artifrepository.citigroup.net/artifactory/generic-cto-dev-local/cate-bigdata-165345/docker/domain.crt"
ARTIFACTORY_AUTH="bd_artifactory_read:cmVmdGtuOjAxOjAwMDAwMDAwMDA6NkI0Uko5TGROZ1ZoZUx4bzJTZj1QVHhqYzRu"

# Nodes
NODES=(
  bdgtr051x03h5.nam.nsroot.net
  dfgtr040x12h5.nam.nsroot.net
  dfgtr042x28h5.nam.nsroot.net
  dfgtr114x11h5.nam.nsroot.net
  dfgtr162x01t2.nam.nsroot.net
  ezgtr084x01t1.nam.nsroot.net
  ezgtr129x27t2.nam.nsroot.net
)

# Step 1: Download once to local
echo "[INFO] Downloading cert locally..."
curl -k -s -L -u $ARTIFACTORY_AUTH -o $CERT_PATH $CERT_URL

if [[ ! -s $CERT_PATH ]]; then
  echo "[FATAL] Failed to download domain.crt â€” aborting."
  exit 1
fi

# Step 2: Push to nodes
for NODE in "${NODES[@]}"; do
  echo ">>> Pushing to $NODE..."

  oc debug node/$NODE -- chroot /host /bin/bash -c "
    cp /etc/pki/ca-trust/source/anchors/domain.crt /etc/pki/ca-trust/source/anchors/domain.crt.bak 2>/dev/null || true
    cat <<EOF >/etc/pki/ca-trust/source/anchors/domain.crt
$(cat $CERT_PATH)
EOF
    update-ca-trust extract
    echo '[SUCCESS] Cert pushed and trusted on $NODE'
  "

done


-----------
#!/bin/bash

CERT_PATH="/tmp/domain.crt"
CERT_URL="https://www.artifrepository.citigroup.net/artifactory/generic-cto-dev-local/cate-bigdata-165345/docker/domain.crt"
ARTIFACTORY_AUTH="bd_artifactory_read:cmVmdGtuOjAxOjAwMDAwMDAwMDA6NkI0Uko5TGROZ1ZoZUx4bzJTZj1QVHhqYzRu"

NODES=(
  bdgtr051x03h5.nam.nsroot.net
  dfgtr040x12h5.nam.nsroot.net
  dfgtr042x28h5.nam.nsroot.net
  dfgtr114x11h5.nam.nsroot.net
  dfgtr162x01t2.nam.nsroot.net
  ezgtr084x01t1.nam.nsroot.net
  ezgtr129x27t2.nam.nsroot.net
)

# Step 1: Download locally
echo "[INFO] Downloading domain.crt to $CERT_PATH"
curl -k -s -L -u $ARTIFACTORY_AUTH -o $CERT_PATH $CERT_URL

if [[ ! -s $CERT_PATH ]]; then
  echo "[ERROR] Download failed â€” aborting."
  exit 1
fi

# Step 2: Copy to each node using oc debug and oc cp
for NODE in "${NODES[@]}"; do
  echo ">>> Syncing to $NODE"

  POD=$(oc debug node/$NODE -o jsonpath='{.metadata.name}')
  sleep 5

  if [[ -z "$POD" ]]; then
    echo "[ERROR] Failed to start debug pod for $NODE"
    continue
  fi

  echo "[INFO] Debug pod: $POD"

  # Copy cert into the debug pod
  oc cp "$CERT_PATH" "$POD:/host/tmp/domain.crt" -c debug

  # Move it into the trusted anchors via chroot
  oc rsh -c debug "$POD" chroot /host /bin/bash -c "
    mv /tmp/domain.crt /etc/pki/ca-trust/source/anchors/domain.crt
    update-ca-trust extract
  "

  echo "[SUCCESS] Cert deployed and trusted on $NODE"

  # Clean up debug pod
  oc delete pod "$POD" --grace-period=0 --force >/dev/null 2>&1
done


===
final
====
#!/bin/bash

# Updated authenticated curl command with directory change
CURL_COMMAND='cd /etc/pki/ca-trust/source/anchors && curl -k -O -L -u bd_artifactory_read:cmVmdGtuOjAxOjAwMDAwMDAwMDA6NkI0Uko5TGROZ1ZoZUx4bzJTZj1QVHhqYzRu https://www.artifrepository.citigroup.net/artifactory/generic-cto-dev-local/cate-bigdata-165345/docker/domain.crt'

# List of worker nodes
NODES=(
  bdgtr051x03h5.nam.nsroot.net
  dfgtr040x12h5.nam.nsroot.net
  dfgtr042x28h5.nam.nsroot.net
  dfgtr114x11h5.nam.nsroot.net
  dfgtr162x01t2.nam.nsroot.net
  ezgtr084x01t1.nam.nsroot.net
  ezgtr129x27t2.nam.nsroot.net
)

echo "==== $(date) - domain.crt sync started ===="

for NODE in "${NODES[@]}"; do
  echo ">>> Processing $NODE"

  oc debug node/$NODE -- chroot /host /bin/bash -c "
    echo '[INFO] Switching to anchors directory and fetching cert...'
    $CURL_COMMAND
    if [ -s /etc/pki/ca-trust/source/anchors/domain.crt ]; then
      echo '[INFO] Extracting updated cert...'
      update-ca-trust extract
      echo '[SUCCESS] Cert installed and trusted on $NODE'
    else
      echo '[ERROR] Cert download failed on $NODE'
    fi
  "

  echo ""
done



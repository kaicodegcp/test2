Step-by-Step Automation Plan:
üîπ Step 1: Create a ConfigMap from domain.crt
Make sure domain.crt is available on your CM admin node.

bash
Copy
Edit
oc create configmap domain-cert --from-file=domain.crt=/tmp/domain.crt -n openshift-config
üîπ Step 2: Create a DaemonSet YAML to copy the cert
Save the following YAML as copy-cert-daemonset.yaml:

yaml
Copy
Edit
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: domain-cert-sync
  namespace: openshift-config
spec:
  selector:
    matchLabels:
      app: domain-cert-sync
  template:
    metadata:
      labels:
        app: domain-cert-sync
    spec:
      hostPID: true
      hostNetwork: true
      containers:
      - name: cert-sync
        image: registry.access.redhat.com/ubi8/ubi
        command:
          - /bin/bash
          - -c
          - |
            cp /certs/domain.crt /host/etc/pki/ca-trust/source/anchors/domain.crt
            chroot /host update-ca-trust extract
            sleep 30 # enough time to propagate before pod exits
        volumeMounts:
        - name: host-root
          mountPath: /host
        - name: domain-cert
          mountPath: /certs
      restartPolicy: Always
      tolerations:
      - operator: Exists
      volumes:
      - name: host-root
        hostPath:
          path: /
      - name: domain-cert
        configMap:
          name: domain-cert
üîπ Step 3: Apply the DaemonSet
bash
Copy
Edit
oc apply -f copy-cert-daemonset.yaml
üîπ Step 4: Confirm domain.crt was copied
On any worker node, run:

bash
Copy
Edit
oc debug node/<worker-node-name>
chroot /host ls -l /etc/pki/ca-trust/source/anchors/domain.crt
üîπ Step 5: Clean Up (Optional After Success)
Once certs are copied and update-ca-trust is done, you may delete the DaemonSet:

bash
Copy
Edit
oc delete daemonset domain-cert-sync -n openshift-config




===============

for node in bdgtr051x03h5.nam.nsroot.net \
            dfgtr040x12h5.nam.nsroot.net \
            dfgtr042x28h5.nam.nsroot.net \
            dfgtr114x11h5.nam.nsroot.net \
            dfgtr162x01t2.nam.nsroot.net \
            ezgtr084x01t1.nam.nsroot.net \
            ezgtr129x27t2.nam.nsroot.net; do
    oc label node $node copy-cert=true --overwrite
done


apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: domain-cert-sync
  namespace: openshift-config
spec:
  selector:
    matchLabels:
      app: domain-cert-sync
  template:
    metadata:
      labels:
        app: domain-cert-sync
    spec:
      tolerations:
      - operator: "Exists"
      nodeSelector:
        copy-cert: "true"
      hostPID: true
      hostNetwork: true
      containers:
      - name: cert-sync
        image: registry.access.redhat.com/ubi8/ubi
        securityContext:
          privileged: true
        command:
        - /bin/bash
        - -c
        - |
          cp /certs/domain.crt /host/etc/pki/ca-trust/source/anchors/domain.crt
          chroot /host update-ca-trust extract
          sleep 20
        volumeMounts:
        - name: host-root
          mountPath: /host
        - name: domain-cert
          mountPath: /certs
      volumes:
      - name: host-root
        hostPath:
          path: /
      - name: domain-cert
        configMap:
          name: domain-cert

oc apply -f cert-copy-daemonset.yaml

oc debug node/<worker-node>
chroot /host ls -l /etc/pki/ca-trust/source/anchors/domain.crt
Then confirm cert is loaded:

bash
Copy
Edit
chroot /host update-ca-trust check


========

Please run the following command on your CM admin node to show me what base images you have:

bash
Copy
Edit
curl -s -k -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/_catalog | jq
Then, for one repo that looks like it might contain a base image (e.g., cdp-private/base or ubi, etc.), run:

bash
Copy
Edit
curl -s -k -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/<repo-name>/tags/list | jq
Example:

bash
Copy
Edit
curl -s -k -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/custom-ubi/tags/list | jq




========

Perfect! You have the image:

arduino
Copy
Edit
sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/cdp-gateway:2.1.0-b288
That‚Äôs what we‚Äôll use in the DaemonSet.

‚úÖ Final cert-copy-daemonset.yaml (Offline-Compatible)
yaml
Copy
Edit
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: domain-cert-sync
  namespace: openshift-config
spec:
  selector:
    matchLabels:
      app: domain-cert-sync
  template:
    metadata:
      labels:
        app: domain-cert-sync
    spec:
      tolerations:
      - operator: Exists
      nodeSelector:
        copy-cert: "true"
      hostPID: true
      hostNetwork: true
      containers:
      - name: cert-sync
        image: sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/cdp-gateway:2.1.0-b288
        securityContext:
          privileged: true
        command:
        - /bin/bash
        - -c
        - |
          echo "[INFO] Copying domain.crt to host anchors directory..."
          cp /certs/domain.crt /host/etc/pki/ca-trust/source/anchors/domain.crt
          echo "[INFO] Running update-ca-trust inside host..."
          chroot /host update-ca-trust extract
          echo "[INFO] Sleeping for debug observation..."
          sleep 600
        volumeMounts:
        - name: host-root
          mountPath: /host
        - name: domain-cert
          mountPath: /certs
      volumes:
      - name: host-root
        hostPath:
          path: /
      - name: domain-cert
        configMap:
          name: domain-cert
üõ†Ô∏è Apply in Your CM Admin Host
bash
Copy
Edit
oc apply -f cert-copy-daemonset.yaml
Then check:

bash
Copy
Edit
oc get pods -n openshift-config -o wide | grep domain-cert
Pick one pod (e.g., on dfgtr162x01t2.nam.nsroot.net):

bash
Copy
Edit
oc logs <pod-name> -n openshift-config
And validate with:

bash
Copy
Edit
oc debug node/<worker-node>
chroot /host ls -l /etc/pki/ca-trust/source/anchors/domain.crt

